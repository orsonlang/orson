ORSON

	Orson is a general-purpose programming language for individuals and small
	groups. It emphasizes efficiency, expressiveness and extensibility, allowing
	access to low-level representations of objects like that of the language C.

	Orson is a work-in-progress, being developed by James B. Moen and Jade Michael
	Thornton. Orson is not an acronym, so it doesn’t appear in capital letters. it
	is not named after any person, place, or thing.

	Orson programs are made up of expressions that work in two phases, called
	transformation and execution. During transformation, Orson applies forms to
	produce new expressions. Forms are similar to macros, but are written in a
	lexically scoped applicative language that can perform arbitrary computations.
	During execution, Orson evaluates the expressions that were produced during
	transformation.

	Orson is currently implemented so that transformation occurs at compile time,
	and execution occurs at run time. This allows writing with forms in an
	abstract and general way, while still producing efficient programs. For
	example, forms can be used as inline substitutes for some procedures. Most
	operators are implemented as forms, so they can be redefined. Abstract data
	types can be implemented as forms that take types as their arguments and
	return types as their results. Control structures can be implemented as
	higher-order forms that take forms as arguments and return forms as their
	results.

	Orson was developed on Intel x86 computers running Debian and Ubuntu
	GNU/Linux, so it should work on similar systems. The Orson compiler itself is
	written in GNU C, and requires only the GNU library. It translates Orson
	source programs to equivalent GNU C programs, and then invokes the GNU C
	compiler GCC to compile them. The Makefile will optionally use any compiler
	specified by the ‘CC‘ environment variable, which is useful for override the
	default ‘clang‘ compiler on macOS.

COMPILER

	The Orson compiler Orson is written in GNU C, and is intended to run under
	Unix-like systems, such as GNU/Linux. It needs only the GNU C Library, and may
	work with other standard C libraries as well. Actually Orson isn’t a compiler,
	but a translator. It converts programs written in Orson to equivalent GNU C
	programs, then calls the GNU C compiler GCC to compile them. The src/
	directory contains GNU C source code for the Orson compiler. The allegedly
	interesting ones are marked with ‘✗’.

		buffer.c      Write to a stream through a buffer.
		cast.c        Explicitly change the types of expressions.
		char.c        Operations on characters.
		coerce.c      Implicitly change the types of expressions.
		debug.c       Functions for debugging.
		declare.c     Encrypt Orson declarations as C declarations.
		emit.c        Write commonly used pieces of C code.
		error.c       Scold the user about errors.
		expression.c  Translate Orson expressions to C expressions.
		file.c        Record which files have been loaded.
		form.c        Operations on forms and form types.
		forward.c     Resolve forward references.
		generic.c     Operations on types that contain gen names.
		global.h      Global definitions.
		hunk.c        Heap management and garbage collection. ✗
		layer.c       Operations on binder trees and layers.
		load.c        Load a C or Orson source file. ✗
		main.c        Main program.
		make.c        Make various objects.
		match.c       Operations on matches.
		name.c        Operations on names.
		path.c        Operations on file pathnames.
		prelude.c     Initialize names.
		program.c     Translate an Orson program to C.
		set.c         Sets of small nonnegative integers as bit strings.
		signal.c      Handle Unix signals.
		size.c        Functions about sizes of types.
		statement.c   Translate Orson clauses to C statements.
		string.c      Operations on Orson strings.
		subtype.c     Test if one type is a subtype of another. ✗
		transform.c   Transform expressions. ✗
		type.c        Operations on types.
		utility.c     Utility functions.

	These files contain documentation and other supporting material.

		Makefile        Compile, install, uninstall Orson.
		README          What you're reading now.
		doc/Readme.by   Bracy source for Readme.html.
		doc/Readme.html Long HTML version of README.
		doc/orson.1     Manual page for Orson.

NOTE

	Both the Orson compiler and the C programs it produces require features of GNU
	C that might not be present in other dialects of C. These features include
	arbitrary length names, auto arrays whose lengths are computed at run time,
	hexadecimal floating point constants, nested functions, statement expressions,
	zero length arrays, and the ‘?:’ operator. This may not be a complete list.

	Orson’s documentation contain special characters. Without proper rendering
	support, you may see question marks, boxes, or other symbols in place of these
	characters.

COPYING

	Orson and its accompanying programs are free software: you can redistribute
	them and/or modify them under the terms of the GNU General Public License,
	version 3, as published by the Free Software Foundation.

	Orson and its accompanying programs are distributed in the hope that they will
	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
	Public License for more details.

	You should have received a copy of the GNU General Public License along with
	Orson and its accompanying programs. If not, see http://www.gnu.org/licenses/.
